name: "PR Checklist Validation"
on:
  pull_request:
    types: [opened, edited, synchronize]
  issue_comment:
    types: [edited]
permissions:
  pull-requests: write
  checks: write
jobs:
  check-pr-checklist:
    runs-on: ubuntu-latest
    steps:
      - name: Post reviewer checklist comment
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            console.log('PR作成時にレビュアーチェックコメントを投稿します');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "## レビュアーチェック\n\n- [ ] **ロールによる挙動の差異が実装されている**\n  コメント: \n\n- [ ] **作成したモジュール・クラス・関数のテストコードが追加・修正されている（コンポーネントテストも含む）**\n  コメント: \n\n---\n*このチェックリストは自動生成されています。レビュアーは上記の項目をチェックしてコメントを記入してください。*"
            });

      - name: Reset checklist on push
        if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
        uses: actions/github-script@v6
        with:
          script: |
            console.log('新しいコミットがpushされました。チェックリストをリセットします');
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            let prBody = pr.body || '';

            // レビュイー用チェックリストをリセット
            const resetBody = prBody.replace(/^- \[x\]/gm, '- [ ]');

            if (resetBody !== prBody) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: resetBody
              });
            }

            // レビュアー用チェックリストコメントもリセット
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const reviewerComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('レビュアーチェック')
            );

            if (reviewerComment) {
              const resetCommentBody = reviewerComment.body.replace(/^- \[x\]/gm, '- [ ]');
              if (resetCommentBody !== reviewerComment.body) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: reviewerComment.id,
                  body: resetCommentBody
                });
              }
            }

      - name: Check PR and Comment Checklists
        uses: actions/github-script@v6
        with:
          script: |
            console.log('ワークフローが開始されました');
            console.log('イベント名:', context.eventName);
            console.log('アクション:', context.payload.action);

            // PRの情報を取得
            let prNumber, prBody;
            if (context.eventName === 'pull_request') {
              prNumber = context.issue.number;
              prBody = context.payload.pull_request.body || '';
            } else {
              // issue_comment イベントの場合
              prNumber = context.issue.number;
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
              });
              prBody = pr.body || '';
            }

            // レビュイー用チェックリストアイテムの総数を取得
            const revieweeTotal = (prBody.match(/^- \[/gm) || []).length;

            // レビュイー用チェック済みアイテムの数を取得
            const revieweeChecked = (prBody.match(/^- \[x\]/gm) || []).length;

            console.log(`レビュイー用チェックリスト: ${revieweeChecked}/${revieweeTotal}`);

            // レビュイー用チェックリストが存在しない場合は警告
            if (revieweeTotal === 0) {
              console.log('::warning::PRテンプレートにチェックリストが見つかりません');
              return;
            }

            // synchronizeイベントの場合は、チェックリストがリセットされるので常に失敗
            if (context.eventName === 'pull_request' && context.payload.action === 'synchronize') {
              console.log('新しいコミットがpushされました。チェックリストを再確認してください');
              process.exit(1);
            }

            // レビュアー用チェックリストをコメントから取得
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            console.log(`コメント数: ${comments.length}`);

            // レビュアーチェックコメントを検索
            const reviewerComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('レビュアーチェック')
            );

            let reviewerTotal = 0;
            let reviewerChecked = 0;

            if (reviewerComment) {
              console.log('レビュアーチェックコメント見つかりました');
              console.log('コメント内容:', reviewerComment.body);
              
              reviewerTotal = (reviewerComment.body.match(/^- \[/gm) || []).length;
              reviewerChecked = (reviewerComment.body.match(/^- \[x\]/gm) || []).length;
              
              console.log(`レビュアー用チェックリスト: ${reviewerChecked}/${reviewerTotal}`);
            } else {
              console.log('レビュアーチェックコメントが見つかりません');
              // コメントが見つからない場合のデバッグ
              console.log('既存のコメント:');
              comments.forEach((comment, index) => {
                console.log(`${index + 1}. ${comment.user.login}: ${comment.body.substring(0, 100)}...`);
              });
            }

            // 両方のチェックリストが完了しているかチェック
            if (revieweeChecked === revieweeTotal && reviewerChecked === reviewerTotal && reviewerTotal > 0) {
              console.log('レビュイーとレビュアーの全てのチェックリストが完了しています');
            } else {
              console.log('チェックリストの完了が必要です');
              console.log(`レビュイー: ${revieweeChecked}/${revieweeTotal}`);
              console.log(`レビュアー: ${reviewerChecked}/${reviewerTotal}`);
              process.exit(1);
            }
