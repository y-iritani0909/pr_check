name: "PR Checklist Validation"
on:
  pull_request:
    types: [opened, edited, synchronize]
permissions:
  pull-requests: write
  checks: write
jobs:
  check-pr-checklist:
    runs-on: ubuntu-latest
    steps:
      - name: Post reviewer checklist comment
        if: github.event.action == 'opened'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: "## レビュアーチェック\n\n- [ ] **ロールによる挙動の差異が実装されている**\n  コメント: \n\n- [ ] **作成したモジュール・クラス・関数のテストコードが追加・修正されている（コンポーネントテストも含む）**\n  コメント: \n\n---\n*このチェックリストは自動生成されています。レビュアーは上記の項目をチェックしてコメントを記入してください。*"
            });

      - name: Reset checklist on push
        if: github.event.action == 'synchronize'
        uses: actions/github-script@v6
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });

            let prBody = pr.body || '';

            // レビュイー用チェックリストをリセット
            const resetBody = prBody.replace(/^- \[x\]/gm, '- [ ]');

            if (resetBody !== prBody) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: resetBody
              });
            }

            // レビュアー用チェックリストコメントもリセット
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const reviewerComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('レビュアーチェック')
            );

            if (reviewerComment) {
              const resetCommentBody = reviewerComment.body.replace(/^- \[x\]/gm, '- [ ]');
              if (resetCommentBody !== reviewerComment.body) {
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: reviewerComment.id,
                  body: resetCommentBody
                });
              }
            }

      - name: Check PR and Comment Checklists
        id: check-checklist
        run: |
          # PRの本文からレビュイー用チェックリストを抽出
          pr_body='${{ github.event.pull_request.body }}'

          # レビュイー用チェックリストアイテムの総数を取得
          reviewee_total=$(echo "$pr_body" | grep -c "^- \[" || echo "0")

          # レビュイー用チェック済みアイテムの数を取得
          reviewee_checked=$(echo "$pr_body" | grep -c "^- \[x\]" || echo "0")

          echo "レビュイー用チェックリスト: $reviewee_checked/$reviewee_total"

          # レビュイー用チェックリストが存在しない場合は警告
          if [ $reviewee_total -eq 0 ]; then
            echo "::warning::PRテンプレートにチェックリストが見つかりません"
            exit 0
          fi

          # synchronizeイベントの場合は、チェックリストがリセットされるので常に失敗
          if [ "${{ github.event.action }}" == "synchronize" ]; then
            echo "新しいコミットがpushされました。チェックリストを再確認してください"
            exit 1
          fi

          # レビュアー用チェックリストをコメントから取得
          reviewer_checked=0
          reviewer_total=0

          # GitHub API でコメントを取得
          comments=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          # レビュアーチェックコメントを検索
          reviewer_comment=$(echo "$comments" | jq -r '.[] | select(.user.login == "github-actions[bot]" and (.body | contains("レビュアーチェック"))) | .body')

          if [ -n "$reviewer_comment" ]; then
            reviewer_total=$(echo "$reviewer_comment" | grep -c "^- \[" || echo "0")
            reviewer_checked=$(echo "$reviewer_comment" | grep -c "^- \[x\]" || echo "0")
            echo "レビュアー用チェックリスト: $reviewer_checked/$reviewer_total"
          fi

          # 両方のチェックリストが完了しているかチェック
          if [ $reviewee_checked -eq $reviewee_total ] && [ $reviewer_checked -eq $reviewer_total ] && [ $reviewer_total -gt 0 ]; then
            echo "レビュイーとレビュアーの全てのチェックリストが完了しています"
          else
            echo "チェックリストの完了が必要です"
            echo "レビュイー: $reviewee_checked/$reviewee_total"
            echo "レビュアー: $reviewer_checked/$reviewer_total"
            exit 1
          fi
